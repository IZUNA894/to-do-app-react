{"version":3,"sources":["showToDo.js","addToDo.js","App.js","serviceWorker.js","index.js"],"names":["App","state","toDos","this","props","toDosList","length","className","map","item","key","id","title","onClick","deleteToDo","React","Component","handleChange","e","setState","target","value","Math","random","handleSubmit","preventDefault","document","getElementById","console","log","addToDo","onSubmit","type","onChange","htmlFor","filter","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAkCeA,E,2MA9BbC,MAAM,G,wEAIG,IAAD,OACFC,EAAOC,KAAKC,MAAMF,MAClBG,EAAY,GAgBhB,OAdEA,EADe,GAAdH,EAAMI,OACK,yBAAKC,UAAU,IAAI,uBAAGA,UAAU,IAAb,+BAGnBL,EAAMM,KAAI,SAACC,GACrB,OACE,wBAAIF,UAAU,qBAAqBG,IAAMD,EAAKE,IAC9C,uBAAGJ,UAAU,IAAKE,EAAKG,MACvB,uBAAGL,UAAU,qCAAqCM,QAAU,WAAK,EAAKT,MAAMU,WAAWL,EAAKE,MAA5F,eAQJ,wBAAIJ,UAAU,cACZF,O,GAzBUU,IAAMC,WC0CThB,E,2MAzCbC,MAAM,CACFW,MAAM,KACND,GAAG,M,EAGRM,aAAa,SAACC,GACZ,EAAKC,SAAS,CAACP,MAAMM,EAAEE,OAAOC,QAC9B,EAAKF,SAAS,CAACR,GAAiB,EAAdW,KAAKC,Y,EAEzBC,aAAe,SAACN,GACdA,EAAEO,iBAC0C,KAAzCC,SAASC,eAAe,SAASN,QAEpCO,QAAQC,IAAI,EAAK5B,OACjB,EAAKG,MAAM0B,QAAQ,EAAK7B,OACxByB,SAASC,eAAe,SAASN,MAAM,K,wEAKtC,OACJ,4BAAQd,UAAU,eAChB,yBAAKA,UAAU,OACb,0BAAMA,UAAU,UAAUwB,SAAW5B,KAAKqB,cAGxC,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAOI,GAAG,QAAQqB,KAAK,OAAOzB,UAAU,WAAW0B,SAAY9B,KAAKc,eACpE,2BAAOiB,QAAQ,SAAf,qB,GA9BQnB,IAAMC,WC4CThB,E,2MA3CbC,MAAM,CACJC,MAAM,CACE,CAACU,MAAM,WAAWD,GAAG,GACrB,CAACC,MAAM,cAAcD,GAAG,GACxB,CAACC,MAAM,gBAAgBD,GAAG,K,EAIpCmB,QAAU,SAACrB,GACT,IAAIP,EAAQ,EAAKD,MAAMC,MACvBA,EAAK,sBAAOA,GAAP,CAAaO,IAClB,EAAKU,SAAS,CAACjB,W,EAGjBY,WAAW,SAACH,GACV,IAAIT,EAAQ,EAAKD,MAAMC,MACvBA,EAAOA,EAAMiC,QAAO,SAAC1B,GACnB,OAAOE,GAAIF,EAAKE,MAElB,EAAKQ,SAAS,CAACjB,W,wEAGjB,OACE,yBAAKK,UAAU,uBAGf,yBAAKA,UAAU,yCAAyC6B,MAAO,CAACC,UAAU,OAC1E,sCACA,uBAAG9B,UAAU,IAAb,6BAIE,yBAAKA,UAAU,gCACf,kBAAE,EAAF,CAAWL,MAAOC,KAAKF,MAAMC,MAAOY,WAAYX,KAAKW,cAErD,yBAAKP,UAAU,IACf,kBAAE,EAAF,CAAUuB,QAAY3B,KAAK2B,gB,GArCff,IAAMC,WCSJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD6H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3ae54917.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass App extends React.Component{\r\n  state={\r\n\r\n  }\r\n\r\n  render(){\r\n    var toDos= this.props.toDos;\r\n    var toDosList = \"\";\r\n    if(toDos.length==0){\r\n      toDosList = <div className=\"\" ><p className=\"\" >No's todo's left for today</p></div>\r\n    }\r\n    else{\r\n      toDosList = toDos.map((item)=>{\r\n        return(\r\n          <li className=\"  collection-item \" key={ item.id}>\r\n          <p className=\"\" >{item.title}\r\n          <a className=\"waves-effect waves-light btn right\" onClick={ ()=>{this.props.deleteToDo(item.id)}}>Delete</a>\r\n          </p>\r\n\r\n          </li>\r\n        )\r\n      })\r\n    }\r\n    return(\r\n      <ul className=\"collection\">\r\n      { toDosList}\r\n      </ul>\r\n\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass App extends React.Component{\r\n  state={\r\n      title:null,\r\n      id:null\r\n  }\r\n\r\n handleChange=(e)=>{\r\n   this.setState({title:e.target.value});\r\n   this.setState({id:Math.random()*5});\r\n }\r\n handleSubmit = (e)=>{\r\n   e.preventDefault();\r\n   if(document.getElementById(\"title\").value===\"\")\r\n      return;\r\n   console.log(this.state);\r\n   this.props.addToDo(this.state);\r\n   document.getElementById(\"title\").value=\"\";\r\n\r\n }\r\n  render(){\r\n\r\n    return(\r\n<footer className=\"page-footer\">\r\n  <div className=\"row\">\r\n    <form className=\"col s12\" onSubmit={ this.handleSubmit}>\r\n\r\n\r\n      <div className=\"row\">\r\n        <div className=\"input-field col s12\">\r\n          <input id=\"title\" type=\"text\" className=\"validate\" onChange= { this.handleChange}   />\r\n          <label htmlFor=\"title\">To-Do...</label>\r\n        </div>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n</footer>\r\n\r\n\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ShowToDo from \"./showToDo.js\";\nimport AddToDo from \"./addToDo.js\";\nclass App extends React.Component {\n  state={\n    toDos:[\n            {title:\"buy milk\",id:1},\n            {title:\"go for walk\",id:2},\n            {title:\"go for market\",id:3}\n\n          ]\n  }\n  addToDo = (item)=>{\n    var toDos = this.state.toDos;\n    toDos = [...toDos,item];\n    this.setState({toDos});\n\n  }\n  deleteToDo=(id)=>{\n    var toDos = this.state.toDos;\n    toDos= toDos.filter((item)=>{\n      return(id!=item.id);\n    })\n    this.setState({toDos});\n  }\n  render(){\n  return (\n    <div className=\"container z-depth-5\">\n\n\n    <div className=\"blue lighten-4 blue-text text-darken-4\" style={{textAlign:null}} >\n    <h2 >To-Do!</h2>\n    <p className=\"\" >create new to-do's here!</p>\n    </div>\n\n\n      <div className=\"blue-text text-darken-4 text\" >\n      < ShowToDo toDos={this.state.toDos} deleteToDo={this.deleteToDo}/>\n      </div>\n      <div className=\"\" >\n      < AddToDo addToDo = { this.addToDo} />\n      </div>\n\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}